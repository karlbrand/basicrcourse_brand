%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Program: 03_KB_basic_course_on_R_objects_functions_practical_answers.rnw%
% Path: ~/Dropbox/Cardioformatics/CTMM_management/projects/R_course_2013  %
% Purpose: Provide an introduction to R for the MGC R Basic R course      %
% Prerequisite(s): none                                                   %
% Author: Karl Brand                                                      %
% Created: c. april 2013                                                  %
% Last update: 2019-05-05                                                 %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% begin preamble %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\documentclass[12pt]{article}

\usepackage{amsmath}
\usepackage{hyperref}
\usepackage[authoryear,round]{natbib}
\usepackage{graphicx}
\usepackage{enumerate}
\usepackage{graphicx} % Compile only with pdfLaTeX
\usepackage{xcolor}   % so we can color the answer's red
% \usepackage{url,verbatim,a4wide,Sweave}
\usepackage{parskip}

\textwidth      = 6.2in
\textheight     = 8.5in
%% \parskip        = 0.3cm
\oddsidemargin  = 0.1in
\evensidemargin = 0.1in
\headheight     = -0.3in

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}
\author{Karl Brand\footnote{brandk@gmail.com}\hspace{2mm}  and Elizabeth Ribble\footnote{emcclel3@msudenver.edu}}
\date{25-28 May 2020}
\begin{document}

%% Bring figures to the top
%% https://tex.stackexchange.com/questions/28556/how-to-place-a-float-at-the-top-of-a-floats-only-page?lq=1
\makeatletter
\setlength{\@fptop}{0pt}
\setlength{\@fpbot}{0pt plus 1fil} %% usually redundant
\makeatother

\title{Basic Course on {\tt R}:\\
  Objects and Functions Practical}
\maketitle
\tableofcontents
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% end preamble %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\newpage\section{Objects and Functions}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsection{Function Arguments}
\begin{enumerate}[(a)]

  \item Look at the help file for the function {\tt mean()}. How many arguments does function have? What types of vectors are accepted? 
  
  \item Use the function {\tt mean()} to calculate the mean of the following values (note the NA and use named arugment matching):
    \begin{tabbing}
      1 \=  2 \= NA  \= 6\\
    \end{tabbing} 
  
  \item Do (b) again but rearrange the arguments. 
  \item Do (b) again using positional matching. 
  \item Determine the class of {\tt mean()} using {\tt class()}. 
  \item Determine the class of {\tt mean()} using {\tt str()}. 
  \item Determine the class of the value output in part (d) using {\tt class()}.
  \item Determine the class of the value output in part (d) using {\tt str()}.
  
  
\end{enumerate}
% \subsection{Create the following objects:}
% \begin{enumerate}[(a)]
% \item A vector of letters called {\tt lettervec}, of class {\tt
%     character}, from `a' to `d', using the function {\tt c()}.  \vspace{5mm}
%   
% % \color{red}
% % 
% % Explicitly using {\tt c()}:
% % <<>>=
% % lettervec <- c("a", "b", "c", "d")
% % @ 
% % 
% % \color{black}
% 
% \item A matrix of numbers called {\tt numbersmat}, using the function {\tt matrix()}, that looks like this when printed:
%   \begin{tabbing}
%     \hspace*{0.5cm} \= \hspace*{0.5cm} \= \hspace*{0.5cm} \kill
%     5  \> 9  \> 13\\
%     6  \> 10  \> 14\\
%     7 \> 11 \> 15\\
%     8 \> 12 \> 16\\
%   \end{tabbing}
% %\color{red}  
% %<<>>=
% %numbersmat <- matrix(5:16, nrow = 4)
% %numbersmat
% %@     
% 
%   #ACTION# DROP this question
% \item A vector of class {\tt factor} called {\tt pets}, that looks
%   approximately like this when printed:
%   \begin{tabbing}
%         cat \=  dog \= NA  \= cat\\
%   \end{tabbing}         
% \end{enumerate}
% \vspace{5mm}
% 
% \subsection{Create a list called {\tt myFirstList} that has elements {\tt lettervec}, {\tt numbersmat}, and {\tt pets} (from Q1.1 above).}
% \vspace{5mm}
% %% \color{red}
% %% We can do this explicitly using {\tt c()} and {\tt factor()}:
% %% <<>>=
% %% pets <- c("cat", "dog", "dog", "dog", "cat", "cat", 
% %%           "cat", "dog", "cat", NA, "dog", "cat")
% %% pets <- factor(pets)
% %% pets
% %% @
% 
% %% Tricker, but maybe quicker way:
% %% <<>>=
% %% pets <- factor(c(1, 2, 2, 2, 1, 1, 1, 2, 1, NA, 2, 1),
% %%                       labels=c("cat", "dog"))
% %% pets
% %% @ 
% %% \color{black}
% 
% %% Now we'll create a {\tt list} called {\tt my.first.list} from these items:
% %% \color{red}
% %% <<>>=
% %% my.first.list <- list(letter.vec, number.mat, pets)
% %% my.first.list
% %% @ 
% %% \color{black}
% \end{enumerate} 
% 
% \subsection{Create a data frame called {\tt myDF} from the data
%   generated in Q1.1 with the column names:}
% 
% \begin{enumerate}[(a)]
% \item {\tt lettervec} and
% %\item {\tt numbers.mat}; and, 
% \item {\tt pets}.
% \end{enumerate}
%   
% \vspace{5mm}
%% \color{red}
%% <<>>=
%% my.df <- data.frame(letter.vec, pets)
%% my.df
%% @
%% \color{black}
% 
% \subsection{To the data frame {\tt my.df}, add the following:}
% \begin{enumerate}[(a)]
% \item A column called {\tt temp} consisting of a vector of odd numbers
%   only beginning with $-3$ and ending with $19$ (inclusive). Hint: type
%   {\tt ?seq} in the {\tt R} terminal.
%   
% %%   \color{red}
% %% <<>>=
% %% temp <- seq(from = -3, by = 2, length.out= 12)
% %% temp  
% %% @
% 
% %% \color{black}
% 
% \item A logical vector called {\tt treated} consisting ofile
%   \begin{tabbing}
%   FALSE, \= TRUE, \= FALSE, \= TRUE, \= FALSE, \= TRUE, \=  FALSE, \= TRUE,\\
%   FALSE, \> TRUE, \> FALSE, \> TRUE
%    \end{tabbing}
% 
% %%    \color{red}
% %%    Besides explicilty writing this out, here's two expressions using {\tt
% %%      rep()}:
% %% <<>>=
% %% treated <- as.logical(rep(c(0, 1), 6))
% %% treated
% %% @
% 
% %% Alternatively:
% %% <<>>=
% %% treated <- rep(c(FALSE, TRUE), 6)
% %% treated
% %% @
% 
% %% Now add these to the data frame {\tt my.df}:
% %% <<>>=
% %% my.df[, "temp"] <- temp
% %% my.df[, "treated"] <- treated
% %% my.df
% %% @
% \end{enumerate}
% 
% %% \color{black}
% 
% \subsection{Add the resulting data frame from Q3 to {\tt my.first.list} as the
%    4th element. Rename the resulting list {\tt big.list}.}
% %% \color{red}
% %% Add {\tt my.df} to {\tt my.first.list}:
% %% <<>>=
% %% my.first.list[[4]] <- my.df
% %% @
% 
% %% Rename the list object to {\tt big.list}:
% %% <<>>=
% %% big.list <- my.first.list
% %% @
% 
% %% Lets check it looks right:
% %% <<>>=
% %% str(big.list)
% %% big.list
% %% @ 
% %% \color{black}
% 
% %% \subsection{Extract the following from  {\tt big.list}:}
% %% \begin{enumerate}[(a)]
% %% \item The letters between `g' and `p' from the first list element.
% %% %% \color{red}
% %% %% <<>>=
% %% %% unlist(big.list[1])[2:11]              # illustrates the unlist() function
% %% %% @ 
% %% %% \color{black}
%   
% %% \item The first row of the matrix from the second list element.
% %% %% \color{red}
% %% %% <<>>=
% %% %% big.list[[2]][1, ]                     # extraction on extraction
% %% %% @   
% %% %% \color{black}
%   
% %% \item The second column of the matrix from the second list element.
% %% %% \color{red}
% %% %% <<>>=
% %% %% "["("[["(big.list, 2), , 2)            # another way to call extraction
% %% %% @ 
% %% %% \color{black}
% 
% %% \item All rows from the data frame from the fourth list element
% %%   for which {\tt treated} is TRUE. Hint 1: {\tt ?subset}. Hint 2: {\tt
% %%   treated == }
% %% %% \color{red}
% %% %% <<>>=
% %% %% subset(big.list[[4]], treated == TRUE) # subset can be convenient 
% %% %% @ 
% %% %% \color{black}
%   
% %% \item All rows from the data frame from the fourth list element
% %%   for which {\tt treated} is TRUE \underline{and} which have the factor equal to
% %%   cat. Hint: \begin{verbatim} ?"&" \end{verbatim}
% %% %% \color{red}
% %% %% <<>>=
% %% %% big.list[[4]][big.list[[c(4, 5)]] == TRUE & 
% %% %%               big.list[[c(4, 3)]] == "cat", ]
% %% %% @ 
% 
% %% %% Note that we can always break this down, into more than one expression
% %% %% by assigning intermediate results to intermediate objects, e.g.:
% %% %% <<>>=
% %% %% xx <- big.list[[4]]
% %% %% xx[xx$treated == TRUE & xx$pets == "cat", ]
% %% %% @ 
% %% \end{enumerate}
% 
% %% %% \color{black}
% 
% %% \subsection{Write a function that reads through the rows of the data
% %%   frame {\tt my.df} and prints the value of {\tt pets} if the {\tt
% %%     temp} is less than 10 and {\tt treated} is FALSE.}
% 
% %% %% \color{red} How does my object look again?!
% %% %% <<>>=
% %% %% my.df
% %% %% str(my.df)
% %% %% @ 
% %% %% A function to literally read through (i.e., loop over) the rows:
% %% %% <<>>=
% %% %% q.6.func <- function(x) {
% %% %%   for (i in 1:nrow(x)) {
% %% %%     if (x[i, 4] < 10 & x[i, 5] == FALSE) {
% %% %%       print(paste(x[i, 3]))
% %% %%     }
% %% %%   }
% %% %% }
%   
% %% %% q.6.func(my.df)
% %% %% @ 
% %% %% \color{black}


\subsection{Use R as a calculator to calculate the following values:}

\begin{center}
$17 ^4$, \,\,\,\,\, $45 - 2 \cdot 3$, \,\,\,\,\, $(45 - 2) \cdot 3$
\end{center}

\vspace{5mm}
%\begin{Sinput}
%> 17^4
%> 2^(1/3)
%> 45-2 * 3
%> (45-2) * 3
%\end{Sinput}

\subsection{Use the operators \texttt{\%\%} and \texttt{\%/\%} to do the following:}

\begin{enumerate}[(a)]
  \item Calculate the remainder after dividing 29,079 into 184,277,809.
  \vspace{5mm}
  
  \item How many times does 29,079 go into 184,277,809 (i.e.\ what's the ``integer divide'' value)?
\end{enumerate}
\vspace{5mm}

\newpage
\subsection{Do the last calculation from Q1.2 in another way, like this:}

<<eval=FALSE>>=
a <- 45
b <- 2
c <- 3
d <- (a - b) * c 
@

Now check what \texttt{a}, \texttt{b}, \texttt{c}, and \texttt{d} are. You can just type the variable name (e.g.\ \texttt{a}) and hit `Control' then `Return' or use the command \texttt{print(a)}.
\vspace{5mm}

\subsection{Do the following to practice saving and opening files in R.}

\begin{enumerate}
\item[(a)] Look at the variables (or other objects) that are stored in your Workspace by typing either \texttt{objects()} or \texttt{ls()}.
\vspace{5mm}

\item[(b)] Check your working directory by typing {\tt getwd()}. Now change it to a different directory - preferably your own flash drive - by using the function {\tt setwd()}, for example: 

<<eval=FALSE>>=
setwd("C:/Users/Elizabeth/My Documents/R Course")
@

\vspace{5mm}

\item[(c)] Use the function ``save.image()'' to save your R session to a file called\\ {\tt YourLastName\_practical1.RData} (replace YourLastName with your last name). Note that this will save a .RData file that contains only those objects you see when you run {\tt ls()}. It does not save any code you typed into the console or into the source pane.
\vspace{5mm}

%% \color{red}
%% First lets check if the current working directory is where we want to save our session:
%% <<eval=FALSE>>=
%% getwd()                        # if not, you can change it using setwd()
%% save.image(file = "practical1.RData")
%% @ 
%% \color{black}



\item[(d)] Use the RStudio ``File'' drop-down menu to save your R source code to a file called {\tt YourLastName\_practical1.R} (replace YourLastName with your last name). Note that this will only save the text you've typed into the source pane. It does not save any objects or anything typed into or ran through the console.
%% \color{red}
%% <<eval=FALSE>>=
%% savehistory(file = "practical1.Rhistory")
%% @ 

%% You may get this error: {\tt `Error in savehistory(file) : no history
%% available to save'} This means no commands have been directly in
%% entered into your \emph{console}, but only from your text editor,
%% which is of course it's own permanent record, assuming you save it!
%% \color{black}
\vspace{5mm}

\item[(e)] Use the function ``save()'' to save only the objects {\tt myFirstList} and {\tt pets}
  to a file called {\tt YourLastName\_objects.RData} (replace YourLastName with your last name).
%% \color{red}
%% <<eval=FALSE>>=
%% save(my.first.list, pets, file = "objects.RData")
%% @
%% \color{black}
\vspace{5mm}


\item[(f)] Now close out RStudio entirely, select ``Save'' or ``Yes'' in any dialog boxes that pop up, and then reopen RStudio. Is your source code still there? 
\vspace{5mm}

\item[(g)] Run {\tt ls()}; are your objects still there? 
\vspace{5mm}

\item[(h)] You can change these kinds of options by going to ``Tools - Global Options''. Go there and deselect ``Restore .RData into workspace at startup''. Then close RStudio and choose to save the .RData file.  

\item[(i)] Reopen RStudio; your environment should be empty. Load your objects back in using {\tt load()} (e.g. {\tt load("Ribble\_practical1.RData")}) and then run ls() again. Do you see your objects now? 
\vspace{5mm}

\item[(j)] Check what the working directory is by again running {\tt getwd()} - has it been reset? 
\vspace{5mm}

\end{enumerate}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 \section{Document License}
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\href{https://www.gnu.org/licenses/gpl-3.0.html}{GNU General Public License v2.0 or higher (GPL$>=$v2)}
 
 \end{document}
